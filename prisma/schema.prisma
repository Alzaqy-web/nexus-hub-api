generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

enum Role {
  customer
  EO
}

model User {
  id               Int                @id @default(autoincrement())
  name             String
  email            String             @unique
  password         String
  profilePic       String?
  referralCode     String?            @unique
  referredBy       String?
  role             Role               @default(customer)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  points           Int                @default(0)
  PointHistory     PointHistory[]
  CustomerDiscount CustomerDiscount[]
  events           Event[]
  transactions     Transaction[]
  tickets          Ticket[]
  Review           Review[]

  @@map("users")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int // 1 - 5
  comment   String
  userId    Int
  eventId   Int
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())

  @@map("reviews")
}

model Organizer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String
  events    Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventId   Int

  @@map("organizers")
}

model Ticket {
  id                Int                 @id @default(autoincrement())
  name              String
  type              String
  price             Int
  // isFree         Boolean
  availableSeats    Int
  deletedAt         DateTime?
  updatedAt         DateTime            @updatedAt
  createdAt         DateTime            @default(now())
  userId            Int
  user              User                @relation(fields: [userId], references: [id])
  eventId           Int
  event             Event               @relation(fields: [eventId], references: [id])
  TransactionTicket TransactionTicket[]

  @@map("tickets")
}

model Event {
  id           Int           @id @default(autoincrement())
  slug         String        @unique
  title        String        @unique
  description  String        @db.Text
  thumbnail    String
  content      String        @db.Text
  category     String
  location     String
  startDate    DateTime
  endDate      DateTime
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  tickets      Ticket[]
  deletedAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  Promotion    Promotion[]
  Organizer    Organizer[]
  Review       Review[]

  @@map("events")
}

model Transaction {
  id                Int                 @id @default(autoincrement())
  userId            Int
  eventId           Int
  quantity          Int
  totalPrice        Int
  status            TransactionStatus   @default(PENDING)
  expiresAt         DateTime
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  user              User                @relation(fields: [userId], references: [id])
  events            Event               @relation(fields: [eventId], references: [id])
  payments          Payment?
  TransactionTicket TransactionTicket[]

  @@map("transactions")
}

enum TransactionStatus {
  PENDING // Menunggu pembayaran
  PAID // Sudah dibayar & valid
  FAILED // Pembayaran gagal
  EXPIRED // Lewat batas waktu bayar
  CANCELED // Dibatalkan user/admin
}

model Payment {
  id            Int         @id @default(autoincrement())
  transactionId Int         @unique
  method        String
  reference     String // e.g., transaction code from payment gateway
  paidAt        DateTime?
  amountPaid    Int
  updatedAt     DateTime    @updatedAt
  createdAt     DateTime    @default(now())
  proofUrl      String? //url untuk bukti tf jika menual
  transactions  Transaction @relation(fields: [transactionId], references: [id])

  @@map("payments")
}

model Promotion {
  id        Int      @id @default(autoincrement())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  code      String   @unique
  discount  Float // contoh: 0.1 untuk 10%
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("promotions")
}

model PointHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  amount    Int
  expiresAt DateTime
  createdAt DateTime

  @@map("points")
}

model CustomerDiscount {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  discount  Float
  used      Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("customers")
}

model TransactionTicket {
  id            Int         @id @default(autoincrement())
  transactionId Int
  ticketId      Int
  quantity      Int
  price         Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  ticket        Ticket      @relation(fields: [ticketId], references: [id])
}
